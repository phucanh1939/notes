; Listing generated by Microsoft (R) Optimizing Compiler Version 19.41.34123.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	insert_value
PUBLIC	insertion_sort
PUBLIC	main
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
pdata	SEGMENT
$pdata$insert_value DD imagerel $LN5
	DD	imagerel $LN5+114
	DD	imagerel $unwind$insert_value
$pdata$insertion_sort DD imagerel $LN6
	DD	imagerel $LN6+87
	DD	imagerel $unwind$insertion_sort
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+101
	DD	imagerel $unwind$main
pdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:main
	DD	0eH
	DD	053H
voltbl	ENDS
xdata	SEGMENT
$unwind$insert_value DD 011201H
	DD	02212H
$unwind$insertion_sort DD 010d01H
	DD	0620dH
$unwind$main DD	011319H
	DD	0a204H
	DD	imagerel __GSHandlerCheck
	DD	040H
xdata	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
length$ = 32
arr$ = 40
__$ArrayPad$ = 64
main	PROC
; File D:\personal-space\notes\computer-architecture\playground\sort\src\sort.c
; Line 21
$LN3:
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 22
	mov	DWORD PTR arr$[rsp], 7
	mov	DWORD PTR arr$[rsp+4], 4
	mov	DWORD PTR arr$[rsp+8], 5
	mov	DWORD PTR arr$[rsp+12], 2
	mov	DWORD PTR arr$[rsp+16], 6
; Line 23
	mov	DWORD PTR length$[rsp], 5
; Line 24
	mov	edx, DWORD PTR length$[rsp]
	lea	rcx, QWORD PTR arr$[rsp]
	call	insertion_sort
; Line 25
	xor	eax, eax
; Line 26
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 88					; 00000058H
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 32
value$2 = 36
arr$ = 64
length$ = 72
insertion_sort PROC
; File D:\personal-space\notes\computer-architecture\playground\sort\src\sort.c
; Line 14
$LN6:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 15
	mov	DWORD PTR i$1[rsp], 1
	jmp	SHORT $LN4@insertion_
$LN2@insertion_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@insertion_:
	mov	eax, DWORD PTR length$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@insertion_
; Line 16
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR arr$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR value$2[rsp], eax
; Line 17
	mov	r8d, DWORD PTR value$2[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR arr$[rsp]
	call	insert_value
	npad	1
; Line 18
	jmp	SHORT $LN2@insertion_
$LN3@insertion_:
; Line 19
	add	rsp, 56					; 00000038H
	ret	0
insertion_sort ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
arr$ = 32
n$ = 40
value$ = 48
insert_value PROC
; File D:\personal-space\notes\computer-architecture\playground\sort\src\sort.c
; Line 4
$LN5:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 5
	mov	eax, DWORD PTR n$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
$LN2@insert_val:
; Line 6
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@insert_val
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR arr$[rsp]
	mov	edx, DWORD PTR value$[rsp]
	cmp	DWORD PTR [rcx+rax*4], edx
	jle	SHORT $LN3@insert_val
; Line 7
	movsxd	rax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR arr$[rsp]
	mov	r8, QWORD PTR arr$[rsp]
	mov	eax, DWORD PTR [r8+rax*4]
	mov	DWORD PTR [rdx+rcx*4], eax
; Line 8
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
; Line 9
	jmp	SHORT $LN2@insert_val
$LN3@insert_val:
; Line 10
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR arr$[rsp]
	mov	edx, DWORD PTR value$[rsp]
	mov	DWORD PTR [rcx+rax*4], edx
; Line 11
	add	rsp, 24
	ret	0
insert_value ENDP
_TEXT	ENDS
END
